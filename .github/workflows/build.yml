name: Build release image

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
  push:
    branches:
      - "main"
    paths-ignore:
      - '.github/workflows/**'

jobs:
  print-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Print the purpose of run
        run: echo ${{ inputs.tags }}

  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/i386,linux/arm64, linux/arm/v7, linux/s390x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env

      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU for Multi-Arch Builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Verify QEMU Installation
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "QEMU has been set up successfully."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        with:
          version: "latest"

      - name: Set Matrix Platform name
        id: matrix-platform-name
        run: |
          echo 'matrix-platform-name=${{ matrix.platform }}' | sed 's:/:-:g' >> $GITHUB_OUTPUT

      - name: Build and Push Image
        uses: docker/build-push-action@v6.10.0
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: VERSION=${{ env.SQUID_VERSION }}
          provenance: mode=max
          sbom: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cache:build
          cache-to: type=local,dest=/tmp/cache,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-${{ steps.matrix-platform-name.outputs.matrix-platform-name }}
          push: true # Pushes the images to the registry after building

  manifest:
    runs-on: ubuntu-latest
    needs: docker
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env

      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Multi-Arch Manifest for Versioned Tag
        run: |
          echo "Creating and pushing multi-arch manifest for versioned tag..."
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-amd64-v2 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-amd64-v3 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-i386 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-arm64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-arm-v7 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-s390x
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-arm-v7 --os linux --arch arm --variant v7
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}-linux-s390x --os linux --arch s390x
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}

      - name: Verify the Pushed Manifest
        run: |
          echo "Verifying manifest for versioned tag (${{ env.SQUID_VERSION }}):"                                                                                                                                         
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} | jq
