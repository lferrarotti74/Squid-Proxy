name: Build release image

# Add permissions block for GitHub Packages
permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
      force_build:
        description: 'Force build even if no base image updates'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - "main"
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize, reopened]
  # NEW: Schedule for checking Alpine Linux updates
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
      
env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/squid-proxy

jobs:
  # NEW: Check if base image (Alpine) has been updated
  check-base-image:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check-image.outputs.should_build || steps.default.outputs.should_build }}
      update_reason: ${{ steps.check-image.outputs.update_reason || steps.default.outputs.update_reason }}
      alpine_digest: ${{ steps.check-image.outputs.digest || steps.default.outputs.digest }}
    steps:
      - name: Check Alpine Linux updates
        id: check-image
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.force_build == 'false')
        run: |
          echo "🔍 Checking Alpine Linux for updates..."
          
          # Get current digest from Docker Hub using a more reliable method
          echo "Pulling latest Alpine image info..."
          
          # Use docker manifest inspect instead of buildx imagetools
          NEW_DIGEST=$(docker manifest inspect alpine:latest | jq -r '.config.digest // .digest // empty')
          
          # Fallback method if the above doesn't work
          if [ -z "$NEW_DIGEST" ] || [ "$NEW_DIGEST" = "null" ]; then
            echo "Trying alternative digest retrieval method..."
            docker pull alpine:latest > /dev/null 2>&1
            NEW_DIGEST=$(docker image inspect alpine:latest --format '{{index .RepoDigests 0}}' | cut -d'@' -f2)
          fi
          
          # Final fallback using docker buildx but with better error handling
          if [ -z "$NEW_DIGEST" ] || [ "$NEW_DIGEST" = "null" ]; then
            echo "Using buildx imagetools as fallback..."
            set +e  # Don't exit on error
            INSPECT_OUTPUT=$(docker buildx imagetools inspect alpine:latest --format '{{json .}}' 2>/dev/null)
            if [ $? -eq 0 ]; then
              NEW_DIGEST=$(echo "$INSPECT_OUTPUT" | jq -r '.manifest.digest // .digest // empty')
            fi
            set -e  # Re-enable exit on error
          fi
          
          echo "Current Alpine digest: $NEW_DIGEST"
          
          # Validate digest format
          if [[ ! "$NEW_DIGEST" =~ ^sha256:[a-f0-9]{64}$ ]]; then
            echo "⚠️ Warning: Retrieved digest format seems invalid: $NEW_DIGEST"
            echo "Skipping build due to digest retrieval error."
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "update_reason=Failed to retrieve valid Alpine digest" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get stored digest from GitHub Variables
          STORED_DIGEST="${{ vars.ALPINE_DIGEST }}"
          echo "Stored Alpine digest: $STORED_DIGEST"
          
          # Handle empty or missing stored digest
          if [ -z "$STORED_DIGEST" ] || [ "$STORED_DIGEST" = " " ] || [ "$STORED_DIGEST" = "sha256:initial" ]; then
            echo "🆕 No previous digest stored. This is the first run - build will proceed."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "digest=$NEW_DIGEST" >> $GITHUB_OUTPUT
            echo "update_reason=First run - initializing Alpine digest tracking" >> $GITHUB_OUTPUT
          elif [ "$NEW_DIGEST" != "$STORED_DIGEST" ]; then
            echo "✅ Alpine Linux has been updated! Build will proceed."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "digest=$NEW_DIGEST" >> $GITHUB_OUTPUT
            echo "update_reason=Alpine Linux base image updated (${STORED_DIGEST:0:12}... → ${NEW_DIGEST:0:12}...)" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No Alpine update detected. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "update_reason=No Alpine updates detected" >> $GITHUB_OUTPUT
          fi
      
      - name: Set default for non-scheduled runs
        id: default
        if: github.event_name != 'schedule' && (github.event_name != 'workflow_dispatch' || inputs.force_build == 'true')
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "update_reason=Non-scheduled trigger" >> $GITHUB_OUTPUT
          echo "digest=" >> $GITHUB_OUTPUT

  print-tag:
    runs-on: ubuntu-latest
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    steps:
      - name: Print the purpose of run
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Purpose of Run: ${{ needs.check-base-image.outputs.update_reason }}"
          else
            echo "Purpose of Run: ${{ inputs.tags || 'Code changes or manual trigger' }}"
          fi

  # SonarQube Analysis Job
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'schedule' && needs.check-base-image.outputs.should_build == 'true')
    needs: [check-base-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=lferrarotti74_Squid-Proxy
            -Dsonar.organization=lferrarotti74
        
  # Build images on x86 runner
  build-x86:
    runs-on: ubuntu-latest
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    strategy:
      matrix:
        platform: [
          {name: "linux/amd64", tag: "amd64"},
          {name: "linux/386", tag: "i386"},
          {name: "linux/riscv64", tag: "riscv64"},
          {name: "linux/ppc64le", tag: "ppc64le"},
          {name: "linux/s390x", tag: "s390x"}
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env
          
      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"

      - name: Log build trigger reason
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "🔄 Build triggered by: ${{ needs.check-base-image.outputs.update_reason }}"
          else
            echo "🚀 Build triggered by: ${{ github.event_name }}"
          fi
        
      - name: Prepare
        run: |
          platform=${{ matrix.platform.name }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> "$GITHUB_ENV"
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          # Add special tag for base image updates
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.SQUID_VERSION }},enable={{is_default_branch}}
            type=raw,value=alpine-update-{{date 'YYYY-MM-DD'}},enable=${{ github.event_name == 'schedule' }}
   
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up QEMU for Multi-Arch Builds
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: ${{ matrix.platform.name }}

      - name: Verify QEMU Installation
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "QEMU has been set up successfully."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          version: latest

      # Add caching for Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform.name }}-
            ${{ runner.os }}-buildx-
        
      - name: Build and Push Image by Digest
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform.name }}
          build-args: VERSION=${{ env.SQUID_VERSION }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.description=Squid Proxy built on Alpine Linux
            ${{ github.event_name == 'schedule' && format('alpine.base.updated={0}', needs.check-base-image.outputs.alpine_digest) || '' }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      # This is a workaround to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Export Digests
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "Digest file created:"
          ls -l /tmp/digests
          
      - name: Upload Digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Build images on ARM runner
  build-arm:
    runs-on: ubuntu-24.04-arm # ARM-specific runner
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    strategy:
      matrix:
        platform: [
          {name: "linux/arm64/v8", tag: "arm64v8"},
          {name: "linux/arm/v7", tag: "arm32v7"},
          {name: "linux/arm/v6", tag: "arm32v6"}
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env
          
      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"

      - name: Log build trigger reason
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "🔄 Build triggered by: ${{ needs.check-base-image.outputs.update_reason }}"
          else
            echo "🚀 Build triggered by: ${{ github.event_name }}"
          fi
        
      - name: Prepare
        run: |
          platform=${{ matrix.platform.name }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> "$GITHUB_ENV"
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          # Add special tag for base image updates
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.SQUID_VERSION }},enable={{is_default_branch}}
            type=raw,value=alpine-update-{{date 'YYYY-MM-DD'}},enable=${{ github.event_name == 'schedule' }}
   
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          version: latest

      # Add caching for Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm-buildx-${{ matrix.platform.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm-buildx-${{ matrix.platform.name }}-
            ${{ runner.os }}-arm-buildx-
        
      - name: Build and Push Image by Digest
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform.name }}
          build-args: VERSION=${{ env.SQUID_VERSION }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.description=Squid Proxy built on Alpine Linux
            ${{ github.event_name == 'schedule' && format('alpine.base.updated={0}', needs.check-base-image.outputs.alpine_digest) || '' }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      # This is a workaround to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Export Digests
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "Digest file created:"
          ls -l /tmp/digests
          
      - name: Upload Digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: 
      - build-x86
      - build-arm
      - check-base-image
    if: github.event_name != 'pull_request' && (github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env
          
      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"
      
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
          
      - name: List digests downloaded
        run: |
          echo "Digest files retrieved:"
          ls -l /tmp/digests
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          
      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:${{ env.SQUID_VERSION }} \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          
          # Add special tag for base image updates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:alpine-update-$(date +%Y-%m-%d) \
              $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          fi

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:${{ env.SQUID_VERSION }} \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          
          # Add special tag for base image updates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:alpine-update-$(date +%Y-%m-%d) \
              $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          fi
            
      - name: Inspect image
        run: |
          echo "Docker Hub images:"
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.SQUID_VERSION }}
          echo "GHCR images:"
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:latest
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:${{ env.SQUID_VERSION }}

  # Image security analysis
  analyze-image:
    runs-on: ubuntu-latest
    needs: [merge, check-base-image]
    if: github.event_name != 'pull_request' && (github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env
          
      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.47.0

      - name: Scan Docker Hub latest image with Trivy
        run: |
          echo "Scanning ${{ env.REGISTRY_IMAGE }}:latest for vulnerabilities..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ env.REGISTRY_IMAGE }}:latest
          
      - name: Scan Docker Hub versioned image with Trivy
        run: |
          echo "Scanning ${{ env.REGISTRY_IMAGE }}:${{ env.SQUID_VERSION }} for vulnerabilities..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ env.REGISTRY_IMAGE }}:${{ env.SQUID_VERSION }}

      - name: Scan GHCR latest image with Trivy
        run: |
          echo "Scanning ${{ env.GHCR_IMAGE }}:latest for vulnerabilities..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ env.GHCR_IMAGE }}:latest
          
      - name: Scan GHCR versioned image with Trivy
        run: |
          echo "Scanning ${{ env.GHCR_IMAGE }}:${{ env.SQUID_VERSION }} for vulnerabilities..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ env.GHCR_IMAGE }}:${{ env.SQUID_VERSION }}

      - name: Generate Trivy vulnerability reports
        run: |
          mkdir -p trivy-reports
          trivy image --format json --output trivy-reports/docker-report-latest.json ${{ env.REGISTRY_IMAGE }}:latest
          trivy image --format json --output trivy-reports/docker-report-${{ env.SQUID_VERSION }}.json ${{ env.REGISTRY_IMAGE }}:${{ env.SQUID_VERSION }}
          trivy image --format json --output trivy-reports/ghcr-report-latest.json ${{ env.GHCR_IMAGE }}:latest
          trivy image --format json --output trivy-reports/ghcr-report-${{ env.SQUID_VERSION }}.json ${{ env.GHCR_IMAGE }}:${{ env.SQUID_VERSION }}
          
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-reports
          path: trivy-reports
          retention-days: 14

      - name: Verify architecture support
        run: |
          echo "Verifying image architecture support..."
          manifest_latest=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest --raw)
            
          # Define all expected architectures
          declare -A expected_archs
          expected_archs["linux/amd64"]="amd64,linux,"
          expected_archs["linux/386"]="386,linux,"
          expected_archs["linux/arm64"]="arm64,linux,"
          expected_archs["linux/arm/v7"]="arm,linux,v7"
          expected_archs["linux/arm/v6"]="arm,linux,v6"
          expected_archs["linux/riscv64"]="riscv64,linux,"
          expected_archs["linux/ppc64le"]="ppc64le,linux,"
          expected_archs["linux/s390x"]="s390x,linux,"
            
          # Check latest image
          echo "Checking architectures in :latest tag..."
          missing_archs=""
            
          # First, extract all valid platform entries from the manifest (excluding attestations)
          platforms=$(echo "$manifest_latest" | jq -c '.manifests[] | select(.platform.architecture != "unknown") | .platform')
            
          # Check each expected architecture
          for arch_name in "${!expected_archs[@]}"; do
            # Parse expected values
            IFS=',' read -r exp_arch exp_os exp_variant <<< "${expected_archs[$arch_name]}"
              
            # Initialize found flag
            arch_found=false
              
            # Check each platform in the manifest
            while read -r platform; do
              # Extract actual values
              act_arch=$(echo "$platform" | jq -r '.architecture')
              act_os=$(echo "$platform" | jq -r '.os')
              act_variant=$(echo "$platform" | jq -r '.variant // ""')
               
              # Compare values
              if [[ "$act_arch" == "$exp_arch" && "$act_os" == "$exp_os" ]]; then
                # For architectures with variants, check the variant too
                if [[ -n "$exp_variant" && "$exp_variant" != "" ]]; then
                  if [[ "$act_variant" == "$exp_variant" ]]; then
                    arch_found=true
                    break
                  fi
                else
                  # For architectures without variants, we already have a match
                  arch_found=true
                  break
                fi
              fi
            done < <(echo "$platforms")
              
            if [ "$arch_found" = true ]; then
              echo "✅ Found: $arch_name"
            else
              echo "⚠️ Missing: $arch_name"
              missing_archs="$missing_archs $arch_name"
            fi
          done
            
          # If we have missing architectures, print a warning but don't fail
          if [[ ! -z "$missing_archs" ]]; then
            echo "⚠️ Warning: The following architectures are not included in the image: $missing_archs"
            echo "This is not an error if these architectures were intentionally excluded."
          else
            echo "✅ All expected architectures are included in the image!"
          fi

  # NEW: Update stored Alpine digest after successful build
  update-digest:
    runs-on: ubuntu-latest
    needs: [check-base-image, merge]
    if: >
      (github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && inputs.force_build == 'false')) &&
      needs.check-base-image.outputs.alpine_digest != '' &&
      needs.merge.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Update stored Alpine digest
        run: |
          echo "📝 Updating stored Alpine digest..."
          echo "Previous: ${{ vars.ALPINE_DIGEST }}"
          echo "New: ${{ needs.check-base-image.outputs.alpine_digest }}"

          gh variable set ALPINE_DIGEST \
            --body "${{ needs.check-base-image.outputs.alpine_digest }}" \
            --repo "${GITHUB_REPOSITORY}"

          echo "✅ Alpine digest updated successfully!"
          echo "Next scheduled run will use this new digest for comparison."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

  # NEW: Build Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [check-base-image, build-x86, build-arm, merge, analyze-image, update-digest]
    if: always()
    steps:
      - name: Generate Build Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "schedule" ]; then
            if [ "${{ needs.check-base-image.outputs.should_build }}" == "true" ]; then
              echo "**Status:** ✅ Alpine Linux updated - Build completed" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** ${{ needs.check-base-image.outputs.update_reason }}" >> $GITHUB_STEP_SUMMARY
              echo "**New Alpine Digest:** \`${{ needs.check-base-image.outputs.alpine_digest }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** ⏭️ No updates detected - Build skipped" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** Alpine Linux digest unchanged" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ✅ Build completed" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Code changes or manual trigger" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images Built:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.GHCR_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-x86.result }}" == "success" ] && [ "${{ needs.build-arm.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Multi-arch build successful** for platforms:" >> $GITHUB_STEP_SUMMARY
            echo "- linux/amd64, linux/386, linux/riscv64, linux/ppc64le, linux/s390x" >> $GITHUB_STEP_SUMMARY
            echo "- linux/arm64/v8, linux/arm/v7, linux/arm/v6" >> $GITHUB_STEP_SUMMARY
          fi
