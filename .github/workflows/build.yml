name: Build release image

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
  push:
    branches:
      - "main"
    paths-ignore:
      - '.github/workflows/**'

jobs:
  print-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Print the purpose of run
        run: echo ${{ inputs.tags }} purpose

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env

      - name: Echo Squid Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.squid_version }} >> "$GITHUB_ENV"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU for Multi-Arch Builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all # Enables all supported platforms for emulation

      - name: Verify QEMU Installation
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "QEMU has been set up successfully."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        with:
          version: "lab:latest"

      - name: Build and push supported architectures locally
        uses: docker/build-push-action@v6.10.0
        with:
          context: .
          build-args: VERSION=${{ env.SQUID_VERSION }}
          platforms: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/i386,linux/arm64
          provenance: mode=max
          sbom: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cache:build
          cache-to: type=local,dest=/tmp/cache,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest
          push: true # Pushes the images to the registry after building
  
      - name: Build unsupported architectures locally and push
        run: |
          echo "Building and pushing unsupported architectures: linux/arm/v7 and linux/s390x..."
          docker buildx build \
            --platform linux/arm/v7,linux/s390x \
            --cache-from type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cache:build \
            --cache-to type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cache:build,mode=max \
            --push \
            --build-arg VERSION=${{ env.SQUID_VERSION }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-arm-v7 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-s390x \
            .

      - name: List Docker images for verification
        run: |
          echo "Listing all Docker images after build and push steps:"
          docker images

      - name: List Docker manifests for verification
        run: |
          echo "Listing all Docker manifests:"
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest || echo "Manifest for latest not found"
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} || echo "Manifest for versioned tag not found"

      - name: Remove existing manifest lists (force)
        run: |
          echo "Attempting to remove existing manifest lists..."
          docker manifest rm ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest || echo "No existing manifest found for 'latest'."
          docker manifest rm ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} || echo "No existing manifest found for version ${{ env.SQUID_VERSION }}."
  
      - name: Create and push multi-arch manifest for "latest" tag
        run: |
          echo "Creating and pushing multi-arch manifest for 'latest' tag..."
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-arm-v7 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-s390x
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-arm-v7 --os linux --arch arm/v7
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-s390x --os linux --arch s390x
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest
  
      - name: Create and push multi-arch manifest for versioned tag
        run: |
          echo "Creating and pushing multi-arch manifest for versioned tag (${ env.SQUID_VERSION })..."
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-arm-v7 \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-s390x
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-arm-v7 --os linux --arch arm/v7
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:linux-s390x --os linux --arch s390x
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }}
  
      - name: Verify the pushed manifest lists
        run: |
          echo "Verifying manifest list for 'latest' tag:"
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:latest || echo "Manifest for 'latest' tag not found."
          echo "Verifying manifest list for versioned tag (${ env.SQUID_VERSION }):"
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/squid-proxy:${{ env.SQUID_VERSION }} || echo "Manifest for versioned tag not found."
  